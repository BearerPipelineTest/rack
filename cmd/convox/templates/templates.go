// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1464072726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1465343086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1465343086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1465343086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5b\x6f\x1b\x47\xd2\x86\xaf\xc5\x5f\x31\x11\x90\x80\xfa\xa0\x50\x73\x3e\x08\xf0\x4d\x6c\x7f\x80\x2f\xd6\x01\x12\xe7\x62\xb1\x5a\x04\x73\xe8\xd1\x12\x96\x48\x2d\x49\x25\x92\x0d\xff\xf7\xad\xa7\xab\x47\xa4\xc8\x21\x75\x86\xbd\x07\x03\x63\xce\xf4\x74\x57\x57\x75\x57\xbd\xfd\x56\x8d\x8e\x8e\xbc\xd7\xd3\xc6\x78\xa7\x66\x62\x66\xe5\xc2\x34\x5e\x75\xed\x9d\x4e\x7f\xac\xc6\x93\xa6\x5c\x94\xa3\x81\x74\x98\x4f\x2f\x67\xb5\x99\x1f\x73\xbf\x30\xe7\x17\x67\xd2\x6f\x7e\x34\x9e\x8c\x17\x47\xb3\x72\x7c\x36\x3f\x1a\x35\xd3\xfa\xa3\x99\x8d\x4f\x27\xd3\x99\xd9\xda\xeb\x8d\xed\xd4\x8e\xcf\xb6\x77\x51\x39\x3f\xd6\xd3\xf3\x8b\xe9\xdc\x8c\xae\xcf\xcf\xfa\xba\x5e\x56\xd7\x77\x4f\x49\xa7\xdd\x33\xd2\xe3\x5e\x13\xce\xc7\x93\x72\x31\x2b\xef\x9c\xb3\xeb\xb7\x73\xda\xae\xd3\xbd\x66\xbe\x9c\x7c\x9c\x4c\xff\x9c\xdc\x39\x73\xd7\x6f\xe7\xcc\x5d\xa7\xbb\x66\xbe\xb9\x1b\x9d\x4e\x79\xf3\xe6\x67\xef\xfd\xcf\x1f\xbc\xb7\x6f\xde\x7d\xf8\x6e\x30\xb8\x28\xeb\x8f\xe5\xa9\x59\xf6\x1f\x0c\xc6\x22\x68\xb6\xf0\x86\x83\xbd\xfd\xea\x5a\x5a\xf6\xe5\x06\xe9\x33\x33\x9f\x1f\x9d\x7e\x1a\x5f\xd0\xd0\x9e\x2f\xf8\x19\x4f\xf5\xff\xa3\xf1\xf4\x72\x31\x3e\xe3\x61\x6a\x07\x5c\x94\x8b\x7f\x1c\xa1\x39\x37\x34\xcc\x17\xb3\xf1\xe4\xd4\xbe\x5b\x8c\xcf\xcd\xfe\xe0\x60\x30\x68\x2f\x27\xb5\xe7\x5c\xf3\x17\x53\x36\x43\x6e\xbc\xbf\xfd\x9d\x69\x0f\xbd\x49\x79\x6e\x3c\x1d\x76\xe0\x0d\xbb\x56\x33\x9b\x4d\x67\x07\xde\xe7\xc1\xde\xe9\x27\xfb\xe4\x1d\xbf\xf2\xd0\x6a\xf4\xde\xfc\x89\x10\x33\x1b\x5a\xb5\x79\xfe\xe9\xb2\x6d\xe5\x19\xb1\x07\x07\x83\xbd\x71\x6b\x07\x7c\xf7\xca\x9b\x8c\xcf\x10\xb1\x37\x33\x8b\xcb\xd9\x84\xc7\x43\x4f\x4c\x1a\xbd\x45\x7a\x3b\xdc\x47\x90\xf7\xfd\x3f\x8f\xbd\xef\xff\xd8\x57\x4d\xec\x5c\x22\xe3\xcb\x60\xb0\xf7\x47\x39\xf3\xaa\xcb\xd6\xd3\x79\x74\x92\xc1\xde\xef\xaa\xce\x2b\x6f\x3c\x1d\xbd\x9e\x5e\x5c\x0f\x7f\x90\x3e\x87\xa2\x9b\x8c\xaa\xcf\xde\x76\x9a\x8e\x5e\x9f\xc9\x3e\x0d\xc5\xfc\x67\xd2\x07\x31\x2a\x7f\x8b\x20\xe9\xa8\x7a\xbb\x46\x51\x6b\xf4\x13\xaa\x0f\x0f\x0e\xe9\x31\x90\x77\x8b\xeb\x0b\xe3\x95\xf3\xb9\x59\xb0\xe4\x97\xf5\x02\x29\xd6\x3e\xb7\x1f\x32\xcd\xa4\x9d\x7a\xde\x74\x3e\xfa\x7f\xd9\xd6\x77\xf2\x70\x33\xce\x6d\x61\xd7\xbe\x22\xc1\xee\xa1\xfc\xd3\x6d\x1c\xec\xcd\xc7\x9f\xec\xf3\x78\xb2\x48\xe3\xc1\xde\x39\x58\xe5\xdd\x08\xfd\x8b\x3c\xda\xc6\x0f\xe2\x21\x1e\x6e\x32\xe2\x8e\x79\xac\xab\x0c\xdb\xf1\xfa\x5c\x07\xde\x7b\x99\x62\x78\xe0\x66\x60\x4e\x67\x65\x3b\x1e\x31\xbb\x0c\xde\x3e\xf6\x57\x51\x47\xc6\x5a\x6d\x6e\x0f\x45\xd1\x9d\x43\xd1\x55\x86\xae\x68\x7e\x5b\x00\xa6\xdd\x25\x00\xe3\x44\xc6\x8d\xa1\x1b\x12\x9c\xf5\xdb\x85\xbc\x9b\xbf\x19\xcf\x44\x44\x35\x9d\x9e\xad\x8e\x2e\xcf\xe6\x77\x58\x7e\x3d\x57\xc3\x05\x5f\xca\xda\x7c\xfe\xb2\x32\xda\xb9\x04\x5e\xfe\x3b\x50\xf3\x0b\x60\xfe\x66\x05\xb2\xc4\xc7\xd5\x29\x86\xfb\x27\x57\x41\x7b\x72\x95\x57\x27\x57\x7e\x2e\x97\xef\xae\xe2\xe4\x2a\x35\xd2\xee\xda\x5a\xe9\xd3\x84\x72\x65\x27\x57\xb1\xf4\x0d\xcb\x93\xab\xba\xd1\xfb\x5a\xfa\xc6\x72\x99\xe4\x76\x9f\x5a\xc6\xd7\x32\x2e\xe4\x5e\xae\xb2\x55\x59\x91\xf4\x49\xe4\x6a\x23\x69\x17\x39\xb9\xb4\xa5\xf1\xc9\x55\x26\xf7\x69\xaa\x73\x17\x22\x23\x93\xf1\xb1\xb4\x15\xd2\xb7\x92\xfb\x42\xde\x25\xf2\x9b\x05\xd2\x4f\xae\xd8\x68\x7f\xe6\x2e\xa5\x5f\x14\xa8\x5e\xb1\xcc\x13\x65\x3a\x6f\x25\xf7\x95\xc8\x0e\xc5\x8e\xb0\xd5\x3e\xb9\xd3\x2f\x42\xb7\x4c\x7f\x13\xb1\x25\x71\xeb\x10\xbb\x71\xa1\x8c\xab\x32\xd5\xcf\x97\xb6\xc0\x5f\xae\x0f\xeb\xc1\x55\xf2\x2c\xfd\x0a\xb1\x3d\x49\x55\xa7\x9b\x35\xf4\xf7\x3b\x88\xec\xdd\x04\x17\xc1\x7d\xc8\xd8\xc5\xf9\x0a\xb2\x0a\x24\xf4\xef\xe5\xa1\xbc\xd9\xdf\x76\xf8\xef\xcb\xdb\x83\x9b\xf0\xeb\x1d\x8f\x06\xff\x67\x81\x63\x55\x03\x8b\x1c\x37\xf0\xbc\x4b\xff\xbb\x50\xf0\x06\xbc\x2c\xfc\x88\xb0\x35\x57\xfe\x4c\x90\x1f\x7b\x3b\x4c\xf0\x88\xe5\x63\x2f\xcb\x0f\x3d\x82\xf2\x78\x35\x66\x87\x71\xe8\x1f\xd8\x76\x42\xed\x58\x43\xf1\xb7\xc9\xf8\x6a\x18\xc4\x69\xec\x67\x61\x16\xa6\x87\x9e\x7f\x20\x28\x5b\x32\xf9\x0f\xd6\xd2\xcf\xd6\xbc\x63\xcf\x59\x89\x66\xc7\xf6\xff\x2f\x37\x6b\x5f\x1e\xee\x0a\x23\x0e\xc6\x47\x05\x51\x5a\x8b\xa3\xc8\x7d\x55\xa9\xb3\xd4\xe2\x3c\x91\xaf\xce\x65\xe4\x5d\x2b\x8e\x18\x24\xea\xbc\x4d\xa0\x4e\x49\x60\x24\xa5\x3a\x64\x29\xb2\x8c\xaf\x32\x78\xf6\xa5\xbd\x2a\x35\x98\x22\x82\x50\xc6\xa5\xc8\x22\x10\x73\x0d\x9a\xc0\x39\x7a\x4b\xd0\x65\xaa\x43\xe3\x02\x2d\x94\x39\x4a\x69\x2b\x63\x0d\xc6\xa8\x56\x3d\x0a\x79\xd7\xca\xbb\x4c\xe4\x66\x95\x06\xa3\x9f\xb8\x20\x6f\x34\xf8\xb1\x27\x92\x71\x89\xf4\x0b\x08\x54\xe9\x97\x13\xc8\x04\x1b\x36\x89\x9c\x50\xe6\x69\x7d\x05\x03\xec\x2d\x7c\x0d\x2e\xec\x25\x30\x2b\x19\x5b\x48\xff\xda\x57\x5d\xb2\x54\xf5\xce\xe5\xbe\x45\x77\xf4\x63\x9d\x64\xde\x4c\xae\x40\xda\x6a\x69\xab\xb0\x8d\xf5\x90\xb6\x0a\xbd\x62\x0d\x70\xe6\x68\x0b\x05\x89\x38\x56\x20\x69\x78\xe6\x5d\xa4\xe0\xc4\x7b\xe6\x00\x14\xca\x42\xf7\x2c\x61\x5d\x01\x24\xd7\x06\xc0\xb0\x5e\xd8\x1c\x1a\x05\x30\xe6\xc5\xae\x26\xd1\x5f\xd6\xa5\x12\x1b\xeb\x5a\x01\x0c\xdb\x03\xfa\x66\xba\x37\x85\x51\xbb\x8d\xcc\x5d\xb4\xba\x0e\x79\xa8\xf3\x14\xb5\xca\x6e\xe5\x37\x4a\x14\x14\x19\x0f\xa0\xa5\x6e\x1d\x98\x1f\x70\x65\xff\xe9\x63\xdc\x3c\xf4\xc1\x0f\xfc\x54\xfd\x88\xbe\xa6\x70\xfe\x53\x2a\xe8\xe2\x73\xac\x1f\x73\x99\x46\x01\xd4\xee\x17\xbe\x92\xeb\x38\xf6\x3c\xab\x75\xcf\xb1\xbf\x4c\x55\x07\xfc\x28\x92\x31\x79\xaa\x72\xd8\xa7\x28\x52\x5d\xf1\xcd\xb4\x54\x3f\x00\x18\x01\x4b\xf4\xf5\x8d\xfa\x28\xeb\x9e\x24\xaa\x0f\x7e\x51\xb9\x7b\x80\x34\x74\xbe\x9d\xb8\x7b\xbb\x7f\x95\xda\x86\xcc\x26\x52\x00\x67\xbf\x1b\x0e\x06\xec\x75\xfe\xcc\x9a\x47\xa9\xae\x35\x73\x87\xd2\x37\x4f\xd4\xc7\x82\x58\xe7\x8e\x33\x7d\x4f\x0c\xf1\x9e\xc3\x08\x3f\xe3\xe0\x61\xcf\x0b\xe7\x1f\xf8\x00\x72\x39\x28\xb0\x1f\xbf\x65\x4d\xfc\x66\x13\xe0\xf1\x0d\xf4\x61\x3f\xad\x6f\xf1\x3e\xb8\x0b\xe0\x81\x87\x27\xc3\x3b\x42\xd6\xc1\x7d\xf9\x66\x27\xb2\xd3\xe1\x11\xb8\xbe\xa2\xf6\x0b\xa0\xfa\xaa\xee\x0e\xd2\xe3\x22\xfd\x76\x30\xfd\xb5\x26\x60\x7f\x3d\x3f\x7b\x14\xb2\x77\xd4\x23\x26\xda\x42\x45\x60\x68\x0e\x48\x1d\xe7\x4b\xca\x84\x87\x42\x59\x40\x3e\xde\x37\xc8\x8b\x14\x01\x40\xdb\x40\x7e\x8b\x48\xdf\xf1\x9c\x23\x37\x50\xe4\x00\xed\x3b\xc4\xe7\x17\x74\xb0\x68\x87\x3e\x89\xde\x13\x61\x20\x86\xef\x9e\x63\xa2\xc5\xb5\x81\xc6\x5c\x75\xba\xec\x13\xbb\x7e\xa1\xfb\xed\x64\x82\x02\x55\xaa\xed\xdc\x83\xc0\x16\x75\x89\xe0\x58\x2f\xa2\xd4\x9e\x30\x8e\x02\x81\x20\x7e\xa8\x3a\x58\x74\x90\x76\x13\x28\x92\x24\xe8\xe6\x90\xb6\x70\xf7\xdd\x15\xfb\x6a\x03\xbf\x95\x43\x57\x1b\x75\x9c\x2c\x99\x3e\xaf\x47\x26\x27\x06\xb2\xc3\x50\x11\x16\xe4\xba\x9b\x7a\x2d\x37\xf9\xc9\xf1\xb9\x14\xb5\x1e\xa5\x9b\x19\xfd\xce\x68\x5d\x0a\x7a\x44\xcc\x6e\x18\xf4\x02\x91\xdb\x67\x8f\x8b\xe0\x20\x0a\xbf\x76\x04\x5f\x56\xd7\xff\x56\xb9\xcd\x56\x87\x46\xaf\x5c\xf3\x9d\xcc\x57\x2a\xb1\xcd\xa1\xd7\x6c\x7e\xa4\x2f\xaf\x49\x59\x71\xe3\x8d\x92\x5e\x8f\x03\xaf\x8d\xbe\xb7\xef\xf6\xeb\xfe\xbc\x6e\xdb\xa3\xbf\x73\xd8\xc8\xff\x66\xfc\xf5\xd1\x49\x44\x22\x47\x48\xde\x3a\x2f\x35\x8e\x3c\xbb\x24\x02\x18\x04\x0e\x21\x75\x40\x36\x70\xdf\x38\x02\x0b\x01\x86\x6c\x9b\x5c\xbd\x1a\x12\x54\x94\x4a\xd8\x21\x36\x64\xb0\x1c\x2b\x96\xd4\x35\xee\xa8\x71\xa4\xde\x92\x27\x27\x8b\x2c\x3c\x77\xa4\x94\x63\x2c\x13\x8f\x4d\xb9\x32\x25\xf7\xa9\x83\x7c\x12\x8b\xb4\x50\x92\x05\x69\x42\xdf\x2c\xd6\xb9\x20\xe6\x96\xe0\x25\x4a\xb8\xe3\x50\x75\xb6\x64\x33\xd0\xe3\x05\xe2\x97\xb9\xe3\x04\x32\x4c\x12\xc3\x31\x48\x02\xd2\x25\x17\xa1\x3b\x66\xf2\x48\x09\x71\x58\x2b\x11\xe4\x98\x41\xff\xa0\xd0\x8c\xbf\xf2\x95\x90\x12\x95\x5c\x55\xa1\xc7\x20\xd1\x48\x64\x43\x9e\x21\xbd\x44\xaf\x31\x4a\x76\x49\x42\x88\xde\x28\xd7\x4a\x44\xe9\xf4\x0f\x48\xce\x6a\x5d\x8f\xbc\x51\x9d\x6d\x52\x57\xe8\x5e\x60\xaf\x9d\xd7\x91\x50\xd6\xb0\x23\xc7\x91\x4b\x66\xd8\x63\xd0\xa3\x75\x89\x5d\x97\x38\x40\x94\xfd\x56\xf7\x04\xf9\x24\x2e\xb6\xca\x11\xb8\x4a\x45\xa8\xc4\x17\xbb\x49\x78\x40\x26\x8e\x69\xc6\xb3\x26\x24\x80\x10\x60\xda\x8c\xab\xa0\x94\x2e\x99\x64\x9d\x93\x4a\xd1\x88\xbd\x69\x8d\xa2\x1d\x7b\x47\x1b\x73\x31\xb6\x71\x88\x44\xb2\x58\x47\xba\xaf\xdc\xe3\x83\x61\xa1\x74\xa5\x71\x49\x61\xda\xaa\x4f\xe0\x1f\x24\xa6\x65\xe0\xaa\x27\x91\x26\x1d\xf4\x5d\x47\x3a\x7c\x9c\xe3\xbd\xec\x8e\xf9\x72\x3b\xa9\xbe\x15\x2d\x4f\xc5\xb9\x35\x4a\x7d\xfb\x9b\xc4\x2e\x88\x7b\x10\xa1\xee\x53\xf9\xf9\xe1\xad\x87\x4e\x87\xc5\x57\x2f\x91\xdc\xd8\xfe\x44\x36\x4d\x98\x01\x0f\xe4\xdc\x84\x31\xa1\x44\x9d\xc4\xaf\x15\x5a\x2c\xc4\x19\xc7\x5e\x7d\x1d\x4f\x9e\x09\xbc\x11\xee\x30\x47\x72\x3a\xc6\x10\x7a\xbe\x3b\x90\xcb\x50\x5d\x18\x58\x22\x17\x26\x37\xc6\x95\x09\x25\xc2\x0a\xd8\x23\x04\x81\x18\x42\xb3\x4d\x9c\xdb\xc2\xca\x1b\x85\x02\xc2\x93\x5c\x91\x50\x27\x8f\xa7\xd8\x68\xe7\x48\xf5\xe0\x26\xef\x46\x4f\x6a\x03\xe8\x49\x5e\x6b\x21\xd1\xd7\x5f\x20\x8f\x83\x1e\x38\xa0\x36\x01\x7b\xa6\xae\x41\x0e\x4d\x06\x41\x5e\x0c\xc1\x80\x4d\x53\x8f\x60\x7d\x28\x50\xd2\x97\x7b\x5b\x4b\x69\x5c\x1e\x9d\x2f\x6b\x09\x10\x07\x8e\x03\x6c\x84\xb1\xdb\x9a\x4d\xab\x21\x0f\xd4\x93\x69\x50\xaf\x21\x34\xa9\x9b\x04\x4e\x67\x8e\x03\x6a\x42\xd8\x66\x0b\xac\xb5\x83\xb2\x5c\x65\x95\xae\x86\xc1\x45\x2d\x84\xfd\x00\xba\xfc\x4c\x75\x04\x56\x59\xd3\xd6\xe9\x44\x7f\x88\x10\x45\x59\x0b\x9f\xb1\xc2\x02\x70\xc3\x05\xdc\xa0\x17\x70\xd6\xc6\x0a\x1f\x6d\xa5\x6d\x85\x83\x28\x6a\x4f\xd4\xa8\x58\xc3\x3e\x08\x61\x0e\xdf\x15\x81\xd9\xa3\x3a\xbf\x07\x59\x7a\x32\xf9\xef\x91\xb4\x06\x27\xf7\xa2\xfe\x3d\x62\x1e\x0e\x2e\x2f\x4c\xfc\xb7\x19\xd3\x41\x8d\xff\xb5\x79\xd4\xaf\xfa\xe1\xf6\xbf\x8d\xfa\xf7\x98\xfd\x38\x67\xee\x11\xb4\xf4\xe5\xde\x4f\xec\x9b\x9e\xdc\x23\xe3\xbe\x8e\xbc\xdd\x8e\x67\xf5\xe3\x2d\x86\x7c\x2b\xc9\xc0\xad\x55\x78\x7a\x3e\x10\xb8\x77\xf1\x4a\x3e\x90\xae\xe5\x03\x14\xdd\x9b\x65\x3e\x00\x38\x73\x18\x72\xf0\xc0\x6f\xe1\xb3\xb8\x3d\x60\x5c\xb9\x7b\x5b\x90\x46\x56\xa1\x07\x6a\xec\x00\xb9\xee\x0e\xc9\xd4\x71\x3a\x57\x4c\x2d\x1d\x0f\xb5\x65\x2e\x57\x90\x47\x0f\x74\x35\xe4\x04\x91\x1e\x3a\xf0\x44\x4a\x3e\x14\x97\x2d\xb7\xae\xb5\x8c\xc4\x41\x57\x74\x5f\xf3\xdc\xa1\xc7\x81\x90\xb8\xaf\x7d\x70\x6f\xc2\xcb\x86\x4d\xeb\x3e\x86\x18\x5d\x27\x0e\x0d\x4a\x49\xb6\xcc\xe6\xbb\x75\x4a\xf5\xc0\x26\x27\xe8\x8a\xb8\xcc\xcd\xc7\x08\xe4\x32\x2e\x37\x9a\x6b\x70\x98\xd9\x1c\x27\x53\x3e\x1c\xba\xbc\x25\x74\xc5\x7f\xf4\x33\xa9\x86\x3d\x65\x3d\xec\xa2\x5c\xd7\xc4\xca\xb5\x81\x09\xc8\x4a\x96\x69\x0e\xc3\x41\x6d\xbf\x1e\x3a\x92\x11\xb9\xf0\x66\xbd\x98\xcb\x16\xca\x0b\xed\xc7\x01\x0c\x67\xa7\x0f\x7b\x69\xf7\x31\xd0\xbe\xad\xe3\xeb\xc6\xe5\x07\x90\x1f\xf2\x24\xf2\x16\xc6\xdb\xc3\xdd\xb8\x8f\x17\xa1\x92\x08\x0e\x68\x88\x00\x7b\x1a\x55\x0a\x5b\xf6\x63\x82\xd1\x36\x74\xa2\x3f\x79\x9c\xcd\x03\x13\xb5\xc1\x72\xfa\x54\xf7\x85\x0f\x30\xe4\x00\xc6\xe5\x03\x10\x09\x0b\x59\xce\x4e\xda\xd0\x99\x3d\xa2\x5c\xc9\xa1\x6c\x73\x8f\x46\xd7\x98\x77\xac\x27\x7d\xbb\x8f\x15\xf8\x2a\xa5\x44\x48\xcb\x3a\x14\x42\x66\x58\x97\xce\x77\xf8\x50\xb0\x25\x37\xd8\x08\x9e\x67\x00\xc2\xdb\x19\xc2\xe6\x5f\x10\xdd\x81\x81\x0f\xc9\x13\xb6\xa9\xff\x22\xf8\xd7\x93\x2d\x44\x7e\xf0\x2d\xa1\xdf\xff\xca\xef\xff\xa9\xe5\xf7\x2d\xdb\xfc\x0c\xd1\xda\x47\xc3\xb7\xff\x41\xdf\x1d\xb1\xfb\x70\x32\xbe\xdb\xb0\x17\x89\xe3\x6f\xba\x14\xff\x9b\xfe\x45\xe3\xb3\x50\x72\x4b\xb5\x1b\xa5\xd9\x26\x5a\x69\x6b\xb5\xc6\x87\xef\xe1\xeb\x7e\xdc\x7f\x86\xc0\x7d\x48\x8e\xf9\x48\x6f\xe3\xb6\xdf\x37\x7b\x54\x7e\x9c\x5f\xf6\x08\x5a\xfa\x64\xef\xdf\x8d\x6e\xba\x63\x8f\x8c\xfb\xba\xe2\x76\x3b\x9e\xd5\x0d\xb7\x18\xd2\x79\xe0\x83\xe9\x74\x12\xc5\x91\x9f\xbf\x8c\x03\x3e\x9a\x4e\x43\x03\xa1\x6c\xdd\xdf\xcb\xf0\xf7\x0c\xb8\x12\x47\x4b\x77\x8c\xe0\x96\xd4\x3c\x2a\xf7\xb7\x1b\xd0\x68\xea\x3c\x91\xab\x53\xe1\x9e\x1c\x41\xc8\xb2\xf5\x20\xf7\x37\x19\x16\xb6\xa9\x49\x45\xfa\x1b\x3b\x77\x0e\xdd\xdf\xf5\x6c\x73\x69\x68\x6a\x19\xb9\x63\xa6\x56\x5b\xee\xe3\xd2\x8f\xa7\x45\x1b\x62\x36\xdd\x79\x17\x2d\xda\x18\xfe\x28\x4f\x7e\x29\x5a\xd4\x67\x41\x47\x8b\x1e\xcc\x8a\x9e\xd3\x89\xff\x15\x00\x00\xff\xff\x42\xab\x04\x65\x00\x30\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 24576, mode: os.FileMode(420), modTime: time.Unix(1465957382, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

